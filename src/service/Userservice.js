import axios from 'axios';
import axiosInstance from '../ultil/axios';
import { logout } from '../redux/slides/UserSlideV1';
import { store } from '../redux/store';
import { axiosJWT } from '.';
import { jwtDecode } from 'jwt-decode';

// üåü Interceptor request: Kh√¥ng c·∫ßn ch·ªânh s·ª≠a
axiosJWT.interceptors.request.use(
    async (config) => config,
    (error) => Promise.reject(error),
);

const accessToken = localStorage.getItem('access_token');

const isTokenExpired = (token) => {
    if (!token) return true;
    try {
        const decoded = jwtDecode(token);
        const currentTime = Date.now() / 1000; // Th·ªùi gian hi·ªán t·∫°i t√≠nh b·∫±ng gi√¢y
        return decoded.exp < currentTime; // So s√°nh th·ªùi gian h·∫øt h·∫°n
    } catch (error) {
        return true;
    }
};
console.log(isTokenExpired(accessToken));
axiosJWT.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        if (isTokenExpired(accessToken)) {
            console.log('‚ö†Ô∏è Token h·∫øt h·∫°n, th·ª±c hi·ªán refresh...');
            try {
                await refreshToken();
                console.log('‚úÖ Token ƒë√£ ƒë∆∞·ª£c refresh, th·ª≠ g·ªçi l·∫°i request');
                return axiosJWT(originalRequest); // Retry request v·ªõi token m·ªõi
            } catch (refreshError) {
                console.error('‚ùå Refresh token th·∫•t b·∫°i, ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng...');
                return Promise.reject(refreshError);
            }
        }
        return Promise.reject(error);
    },
);

export const getDetailUser = async () => {
    try {
        const res = await axiosJWT.get(`/user/getUser`);
        console.log('‚úÖ L·∫•y th√¥ng tin user th√†nh c√¥ng:', res.data);
        return res.data;
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin user:', error);
        throw new Error('Failed to fetch user details');
    }
};

export const refreshToken = async () => {
    try {
        const res = await axiosInstance.post('/user/refreshtoken', {}, { withCredentials: true });
        console.log('‚úÖ Token ƒë√£ ƒë∆∞·ª£c refresh:', res);
        localStorage.setItem('access_token', res.data.access_token); // C·∫≠p nh·∫≠t token m·ªõi v√†o localStorage
        return res.data;
    } catch (error) {
        console.error('‚ùå Refresh token th·∫•t b·∫°i:', error);
        if (error.response?.status === 403) {
            console.error('‚ùå Refresh token h·∫øt h·∫°n, logout ngay');
            store.dispatch(logout()); // üöÄ ƒêƒÉng xu·∫•t ngay n·∫øu refresh h·∫øt h·∫°n
        }
        throw error;
    }
};
// üî• API logout
export const logoutUser = async () => {
    try {
        const res = await axios.post(`${process.env.REACT_APP_API_URL}user/logout`, {}, { withCredentials: true });
        store.dispatch(logout());
        console.log('ÔøΩÔøΩ ƒêƒÉng xu·∫•t th√†nh c√¥ng:', res.data);
        return res.data;
    } catch (error) {
        console.error('‚ùå L·ªói khi logout:', error);
        throw error;
    }
};
export const loginUser = async (data) => {
    const res = await axios.post(`${process.env.REACT_APP_API_URL}user/sign-in`, data, {
        withCredentials: true,
    });
    return res.data;
};

export const signUpUser = async (data) => {
    console.log(data);
    const res = await axios.post(`http://localhost:2000/user/sign-up`, data);
    return res.data;
};
export const getAllUser = async () => {
    const res = await axios.get(`${process.env.REACT_APP_API_URL}user/getAll`);
    return res.data;
};
